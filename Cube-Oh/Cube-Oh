<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cube-Oh Voice Agent Widget</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
    <style>
        :root {
            /* Base Palette */
            --bg-color: #f8f4f0; /* Set a default background, but can be made transparent */
            --text-dark: #2d3748;

            /* Cube Palette */
            --cube-base: #282828;
            --cube-highlight: #3a3a3a;
            --cube-hover-glow: rgba(183, 121, 31, 0.4);
            
            /* Listening State Palette */
            --listening-glow: rgba(34, 211, 238, 0.7); /* Cyan glow */
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html, body {
            width: 100%;
            height: 100%;
            overflow: hidden; /* Prevent scrollbars in widget view */
        }

        body {
            font-family: 'Roboto', sans-serif;
            background-color: var(--bg-color);
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
        }
        
        .scene {
            width: 250px;
            height: 250px;
            perspective: 1500px;
        }

        .cube {
            width: 100%;
            height: 100%;
            position: relative;
            transform-style: preserve-3d;
        }
        
        .cube-face {
            position: absolute;
            width: 250px;
            height: 250px;
            background: linear-gradient(145deg, var(--cube-base), var(--cube-highlight));
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: box-shadow 0.4s ease, border-color 0.4s ease;
        }
        
        .cube-face:hover {
            box-shadow: 0 0 45px 5px var(--cube-hover-glow);
            border-color: var(--accent-gold);
        }

        /* Listening State Animation */
        @keyframes pulse-listening {
            0% { box-shadow: 0 0 10px 0px rgba(34, 211, 238, 0.3); }
            50% { box-shadow: 0 0 50px 10px var(--listening-glow); }
            100% { box-shadow: 0 0 10px 0px rgba(34, 211, 238, 0.3); }
        }

        .is-listening .cube-face {
            animation: pulse-listening 2s ease-in-out infinite;
            border-color: var(--listening-glow);
        }

        .face-front  { transform: rotateY(0deg) translateZ(125px); }
        .face-back   { transform: rotateY(180deg) translateZ(125px); }
        .face-right  { transform: rotateY(90deg) translateZ(125px); }
        .face-left   { transform: rotateY(-90deg) translateZ(125px); }
        .face-top    { transform: rotateX(90deg) translateZ(125px); }
        .face-bottom { transform: rotateX(-90deg) translateZ(125px); }
        
        /* Demo Controls */
        .controls {
            position: absolute;
            bottom: 2rem;
            left: 50%;
            transform: translateX(-50%);
            z-index: 10;
            display: flex;
            gap: 1rem;
            background: rgba(255,255,255,0.8);
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .controls button {
            font-family: 'Roboto', sans-serif;
            font-weight: 700;
            font-size: 1rem;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
            background-color: #e1e1e1;
            color: #333;
        }
        
        .controls button.active {
            background-color: var(--text-dark);
            color: white;
        }
        .controls button:hover:not(.active) {
            background-color: #ccc;
        }

    </style>
</head>
<body>
    <div class="scene">
        <div class="cube" id="cube">
            <div class="cube-face face-front"></div>
            <div class="cube-face face-back"></div>
            <div class="cube-face face-right"></div>
            <div class="cube-face face-left"></div>
            <div class="cube-face face-top"></div>
            <div class="cube-face face-bottom"></div>
        </div>
    </div>

    <!-- Demo controls to show states. Can be removed when integrated. -->
    <div class="controls">
        <button id="btn-idle" class="active">Idle</button>
        <button id="btn-listen">Listening</button>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const cube = document.getElementById('cube');
            
            let rotateX = -20;
            let rotateY = -30;
            let isListening = false;
            
            const defaultSpeed = 0.15;
            const listeningSpeed = 0.05;

            /**
             * Sets the visual state of the cube.
             * @param {boolean} listening - True if the agent is active/listening, false otherwise.
             */
            function setListeningState(listening) {
                isListening = listening;
                const idleBtn = document.getElementById('btn-idle');
                const listenBtn = document.getElementById('btn-listen');

                if (isListening) {
                    cube.classList.add('is-listening');
                    idleBtn.classList.remove('active');
                    listenBtn.classList.add('active');
                } else {
                    cube.classList.remove('is-listening');
                    idleBtn.classList.add('active');
                    listenBtn.classList.remove('active');
                }
            }

            // --- Animation Loop ---
            function animate() {
                const currentSpeed = isListening ? listeningSpeed : defaultSpeed;
                rotateX += currentSpeed;
                rotateY += currentSpeed;
                cube.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
                requestAnimationFrame(animate);
            }

            // --- Demo Control Logic ---
            const idleBtn = document.getElementById('btn-idle');
            const listenBtn = document.getElementById('btn-listen');
            
            idleBtn.addEventListener('click', () => setListeningState(false));
            listenBtn.addEventListener('click', () => setListeningState(true));
            
            // Expose the control function globally for easy integration
            window.setListeningState = setListeningState;

            // Start the animation
            animate();
        });
    </script>
</body>
</html>