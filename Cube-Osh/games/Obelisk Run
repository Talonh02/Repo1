<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Obelisk Run (Light)</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&family=Roboto:wght@300;400&display=swap" rel="stylesheet">
    <style>
        :root {
            /* Light Palette from original portfolio */
            --bg-start: #fdfcfb;
            --bg-end: #f8f4f0;
            --text-dark: #2d3748;
            --text-light: #5a677b;
            --accent-gold: #b7791f;
            --accent-gold-glow: rgba(183, 121, 31, 0.4);
            --cube-base: #282828;
            --cube-highlight: #3a3a3a;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(135deg, var(--bg-start) 0%, var(--bg-end) 100%);
            color: var(--text-dark);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            overflow: hidden;
        }

        .game-container {
            width: 90vw;
            height: 80vh;
            max-width: 1000px;
            max-height: 600px;
            position: relative;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            border-radius: 12px;
            overflow: hidden;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        canvas {
            display: block;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, var(--bg-start) 0%, var(--bg-end) 100%);
        }

        .ui-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            color: var(--text-dark);
            transition: opacity 0.5s ease;
            pointer-events: none;
        }

        .start-screen, .game-over-screen {
            background-color: rgba(253, 252, 251, 0.85);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            width: 100%;
            height: 100%;
            pointer-events: all;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .hidden {
            opacity: 0;
            pointer-events: none;
        }

        .game-title {
            font-family: 'Playfair Display', serif;
            font-size: clamp(2.5rem, 6vw, 4rem);
            margin-bottom: 0.5rem;
        }

        .instructions {
            font-size: clamp(0.9rem, 2vw, 1.1rem);
            color: var(--text-light);
            margin-bottom: 2rem;
            max-width: 80%;
        }
        
        .final-score-label {
             font-family: 'Playfair Display', serif;
             font-size: clamp(1rem, 2.5vw, 1.2rem);
             color: var(--text-light);
             margin-bottom: 0.5rem;
        }
        
        .final-score {
             font-family: 'Roboto', sans-serif;
             font-weight: 700;
             font-size: clamp(3rem, 8vw, 5rem);
             color: var(--accent-gold);
             margin-bottom: 2rem;
        }

        .start-button, .restart-button {
            font-family: 'Roboto', sans-serif;
            font-weight: 700;
            font-size: 1rem;
            color: var(--bg-start);
            background-color: var(--cube-base);
            padding: 0.8rem 2.5rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .start-button:hover, .restart-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
        }

        #score-container {
            position: absolute;
            top: 20px;
            right: 30px;
            font-family: 'Roboto', sans-serif;
            font-weight: 700;
            font-size: 2rem;
            color: var(--text-dark);
        }

    </style>
</head>
<body>

    <div class="game-container">
        <canvas id="gameCanvas"></canvas>
        <div id="score-container">0</div>

        <!-- Start Screen -->
        <div id="startScreen" class="ui-overlay start-screen">
            <h1 class="game-title">Obelisk Run</h1>
            <p class="instructions">Navigate the construct. Avoid the monoliths.<br>Press [Space] or Tap to engage vertical thrusters.</p>
            <button id="startButton" class="start-button">Initiate</button>
        </div>

        <!-- Game Over Screen -->
        <div id="gameOverScreen" class="ui-overlay game-over-screen hidden">
            <h1 class="game-title">Cycle Ended</h1>
             <p class="final-score-label">Distance Logged:</p>
             <p id="finalScore" class="final-score">0</p>
            <button id="restartButton" class="restart-button">Re-Initiate</button>
        </div>
    </div>

    <script>
        // --- DOM Elements ---
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const gameContainer = document.querySelector('.game-container');
        const scoreContainer = document.getElementById('score-container');
        const startScreen = document.getElementById('startScreen');
        const gameOverScreen = document.getElementById('gameOverScreen');
        const startButton = document.getElementById('startButton');
        const restartButton = document.getElementById('restartButton');
        const finalScoreDisplay = document.getElementById('finalScore');

        // --- Game Styling ---
        const colors = {
            cube: getComputedStyle(document.documentElement).getPropertyValue('--cube-base').trim(),
            cubeHighlight: getComputedStyle(document.documentElement).getPropertyValue('--cube-highlight').trim(),
            particle: getComputedStyle(document.documentElement).getPropertyValue('--text-light').trim()
        };

        // --- Game State & Configuration ---
        let score = 0;
        let gameSpeed = 6;
        let isPlaying = false;
        let animationFrameId;

        // --- Game Objects ---
        let player, obstacles, particles, bgParticles;

        // --- Physics ---
        const gravity = 0.9;
        const jumpStrength = -18;

        // --- Setup Canvas Size ---
        function setCanvasSize() {
            canvas.width = gameContainer.clientWidth;
            canvas.height = gameContainer.clientHeight;
        }
        
        // --- Background Particle ---
        class BgParticle {
            constructor(x, y, radius, speed) {
                this.x = x;
                this.y = y;
                this.radius = radius;
                this.speed = speed;
                this.opacity = Math.random() * 0.3 + 0.1;
            }
            draw() {
                ctx.fillStyle = `rgba(45, 55, 72, ${this.opacity})`;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fill();
            }
            update() {
                this.x -= this.speed * gameSpeed * 0.1; // Parallax
                if (this.x < -this.radius) {
                    this.x = canvas.width + this.radius;
                }
                this.draw();
            }
        }


        // --- Player Trail Particle Class ---
        class Particle {
            constructor(x, y, size, color) {
                this.x = x;
                this.y = y;
                this.size = size;
                this.color = color;
                this.life = 1;
                this.velocityX = (Math.random() - 0.5) * 2 - gameSpeed / 2;
                this.velocityY = (Math.random() - 0.5) * 2;
            }
            update() {
                this.life -= 0.05;
                this.x += this.velocityX;
                this.y += this.velocityY;
                this.size *= 0.96;
            }
            draw() {
                ctx.globalAlpha = this.life > 0 ? this.life : 0;
                ctx.fillStyle = this.color;
                ctx.fillRect(this.x, this.y, this.size, this.size);
                ctx.globalAlpha = 1;
            }
        }

        // --- Player Class ---
        class Player {
            constructor(x, y, size) {
                this.x = x;
                this.y = y;
                this.baseY = y;
                this.size = size;
                this.velocityY = 0;
                this.isJumping = false;
            }

            draw() {
                const gradient = ctx.createLinearGradient(this.x, this.y, this.x + this.size, this.y + this.size);
                gradient.addColorStop(0, colors.cubeHighlight);
                gradient.addColorStop(1, colors.cube);
                
                ctx.fillStyle = gradient;
                ctx.fillRect(this.x, this.y, this.size, this.size);
                ctx.strokeStyle = 'rgba(0,0,0,0.2)';
                ctx.strokeRect(this.x, this.y, this.size, this.size);
            }

            update() {
                 if (isPlaying && this.isJumping) {
                     particles.push(new Particle(this.x, this.y + this.size, Math.random() * 4 + 2, colors.particle));
                }

                if (this.isJumping) {
                    this.y += this.velocityY;
                    this.velocityY += gravity;
                    if (this.y > this.baseY) {
                        this.y = this.baseY;
                        this.velocityY = 0;
                        this.isJumping = false;
                    }
                }
                this.draw();
            }

            jump() {
                if (!this.isJumping) {
                    this.velocityY = jumpStrength;
                    this.isJumping = true;
                }
            }
        }

        // --- Obstacle Class (Obelisk) ---
        class Obstacle {
            constructor(x, y, width, height) {
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
            }

            draw() {
                const gradient = ctx.createLinearGradient(this.x, this.y, this.x + this.width, this.y);
                gradient.addColorStop(0, colors.cube);
                gradient.addColorStop(0.5, colors.cubeHighlight);
                gradient.addColorStop(1, colors.cube);

                ctx.fillStyle = gradient;
                ctx.beginPath();
                ctx.moveTo(this.x, this.y + this.height);
                ctx.lineTo(this.x + this.width, this.y + this.height);
                ctx.lineTo(this.x + this.width, this.y); 
                ctx.lineTo(this.x, this.y);
                ctx.closePath();
                ctx.fill();
            }

            update() {
                this.x -= gameSpeed;
                this.draw();
            }
        }
        
        // --- Game Logic ---
        function init() {
            setCanvasSize();

            score = 0;
            gameSpeed = 6;
            obstacles = [];
            particles = [];
            bgParticles = [];
            scoreContainer.textContent = score;
            
            for (let i = 0; i < 50; i++) {
                bgParticles.push(new BgParticle(Math.random() * canvas.width, Math.random() * canvas.height, Math.random() * 2 + 1, Math.random() * 0.4 + 0.1));
            }

            const playerSize = canvas.width * 0.04;
            const playerY = canvas.height - playerSize - (canvas.height * 0.1); // Raise the "floor"
            player = new Player(playerSize * 2, playerY, playerSize);

            scoreContainer.style.visibility = 'visible';
            gameOverScreen.classList.add('hidden');
        }
        
        function generateObstacles() {
            // Further increased spacing as requested.
            // The condition now checks if the last obstacle is less than 40-60% of the screen width away.
            // A smaller value in this check means the obstacle must travel further left before a new one spawns.
            if (obstacles.length === 0 || obstacles[obstacles.length - 1].x < canvas.width * (Math.random() * 0.2 + 0.4)) {
                const minHeight = 40;
                const maxHeight = 120;
                const width = 30;
                
                const height = Math.random() * (maxHeight - minHeight) + minHeight;
                const y = canvas.height - height - (canvas.height * 0.1); // Match floor height
                
                obstacles.push(new Obstacle(canvas.width, y, width, height));
            }
        }

        function checkCollision(p, o) {
            return (
                p.x < o.x + o.width &&
                p.x + p.size > o.x &&
                p.y < o.y + o.height &&
                p.y + p.size > o.y
            );
        }

        function gameLoop() {
            if (!isPlaying) return;

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            bgParticles.forEach(p => p.update());

            for (let i = particles.length - 1; i >= 0; i--) {
                let p = particles[i];
                p.update();
                p.draw();
                if (p.life <= 0) particles.splice(i, 1);
            }

            player.update();
            generateObstacles();

            for (let i = obstacles.length - 1; i >= 0; i--) {
                let o = obstacles[i];
                o.update();
                if (checkCollision(player, o)) {
                    gameOver();
                    return;
                }
                if (o.x + o.width < 0) {
                    obstacles.splice(i, 1);
                }
            }

            score++;
            scoreContainer.textContent = score;
            if (score > 0 && score % 200 === 0) {
                gameSpeed += 0.5;
            }

            animationFrameId = requestAnimationFrame(gameLoop);
        }
        
        function startGame() {
            isPlaying = true;
            startScreen.classList.add('hidden');
            init();
            gameLoop();
        }

        function gameOver() {
            isPlaying = false;
            cancelAnimationFrame(animationFrameId);
            scoreContainer.style.visibility = 'hidden';
            gameOverScreen.classList.remove('hidden');
            finalScoreDisplay.textContent = score;
        }

        // --- Event Listeners ---
        window.addEventListener('resize', () => {
            if (!isPlaying) {
                init();
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                bgParticles.forEach(p => p.draw());
                player.draw();
            }
        });

        const handleJump = (e) => {
            if (isPlaying) {
                e.preventDefault();
                player.jump();
            }
        };

        window.addEventListener('keydown', (e) => { if (e.code === 'Space') handleJump(e); });
        gameContainer.addEventListener('touchstart', handleJump);
        gameContainer.addEventListener('mousedown', handleJump);
        
        startButton.addEventListener('click', startGame);
        restartButton.addEventListener('click', startGame);

        // --- Initial call ---
        window.onload = () => {
            init();
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            bgParticles.forEach(p => p.draw());
            player.draw();
        };
    </script>
</body>
</html>